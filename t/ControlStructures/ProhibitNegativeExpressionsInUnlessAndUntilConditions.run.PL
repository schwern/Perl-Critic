#!/usr/bin/env perl

use strict;
use warnings;

use English qw{-no_match_vars};

use Carp qw{ confess };
use Fatal qw{ open close };

our $VERSION = '1.080';



my $this_program = __FILE__;
(my $test_file_name = $this_program) =~ s/ \.PL \z //xms;
if ($this_program eq $test_file_name) {
    confess
        'Was not able to figure out the name of the file to generate.'
        . "This program: $this_program.";
}

print "\n\nGenerating $test_file_name.\n";



open my $test_file, '>', $test_file_name
    or die "Could not open $test_file_name: $ERRNO";


print {$test_file} <<"END_HEADER";
# Do not edit!!!  This test suite generated by $this_program.
END_HEADER

foreach my $operator ( qw/ ! not / ) {
    emit_not_operator_code($test_file, $operator);
}
emit_not_match_code($test_file);
foreach my $operator ( qw/ ne != < > <= >= <=> lt gt le ge cmp / ) {
    emit_comparator_code($test_file, $operator);
}


close $test_file;
print "Done.\n\n";

#-----------------------------------------------------------------------------

sub emit_not_operator_code {
    my ($test_file, $operator) = @_;

    my $code_template = <<'END_NOT_OPERATOR_CODE';

## name "%OPERATOR%" within positive control structures
## failures 0
## cut

if (%OPERATOR% $foo) {
    blah();
}

if ($foo) {
    blah($foo);
}
elsif (%OPERATOR% $bar) {
    blah($bar);
}
else {
    blah(undef);
}

while (%OPERATOR% $foo) {
    blah();
}

foreach my $bar ( grep { %OPERATOR% $_ } \@foo ) {
    blah($bar);
}

for (my $bar = 0; %OPERATOR% $bar; $bar++) {
    blah($bar);
}

#-----------------------------------------------------------------------------

## name "%OPERATOR%" within positive postfix statement modifiers
## failures 0
## cut

blah() if %OPERATOR% $foo;

blah() while %OPERATOR% $foo;

blah($_) for grep { %OPERATOR% $_ } \@foo;

#-----------------------------------------------------------------------------

## name "%OPERATOR%" within negative control structures
## failures 2
## cut

unless (%OPERATOR% $foo) {
    blah();
}

until (%OPERATOR% $foo) {
    blah();
}

#-----------------------------------------------------------------------------

## name "%OPERATOR%" within negative postfix statement modifiers
## failures 2
## cut

blah() unless %OPERATOR% $foo;

blah() until %OPERATOR% $foo;

#-----------------------------------------------------------------------------
END_NOT_OPERATOR_CODE

    $code_template =~ s{%OPERATOR%}{$operator}gmx;
    print {$test_file} $code_template;
}

#-----------------------------------------------------------------------------

sub emit_not_match_code {
    my ($test_file) = @_;

    print {$test_file} <<'END_NOT_MATCH_CODE';

## name "!~" within positive control structures
## failures 0
## cut

if ($foo !~ m/bar/) {
    blah();
}

if ($foo) {
    blah($foo);
}
elsif ($bar !~ m/bar/) {
    blah($bar);
}
else {
    blah(undef);
}

while ($foo !~ m/bar/) {
    blah();
}

foreach my $bar ( grep { $_ !~ m/baz/ } @foo ) {
    blah($bar);
}

for (my $bar = 0; $bar =~ m/baz/; $bar++) {
    blah($bar);
}

#-----------------------------------------------------------------------------

## name "!~" within positive postfix statement modifiers
## failures 0
## cut

blah() if $foo !~ m/bar/;

blah() while $foo !~ m/bar/;

blah($_) for grep { $_ !~ m/bar/ } @foo;

#-----------------------------------------------------------------------------

## name "!~" within negative control structures
## failures 2
## cut

unless ($foo !~ m/bar/) {
    blah();
}

until ($foo !~ m/bar/) {
    blah();
}

#-----------------------------------------------------------------------------

## name "!~" within negative postfix statement modifiers
## failures 2
## cut

blah() unless $foo !~ m/bar/;

blah() until $foo !~ m/bar/;

#-----------------------------------------------------------------------------
END_NOT_MATCH_CODE
}

#-----------------------------------------------------------------------------

sub emit_comparator_code {
    my ($test_file, $operator) = @_;

    my $code_template = <<'END_COMPARATOR_CODE';

## name "%OPERATOR%" within positive control structures
## failures 0
## cut

if ($foo %OPERATOR% $bar) {
    blah();
}

if ($foo %OPERATOR% $bar) {
    blah($foo);
}
elsif ($bar %OPERATOR% $baz) {
    blah($bar);
}
else {
    blah(undef);
}

while ($foo %OPERATOR% $bar) {
    blah();
}

foreach my $bar ( grep { $_ %OPERATOR% $baz } \@foo ) {
    blah($bar);
}

for (my $bar = 0; $bar %OPERATOR% $baz; $bar++) {
    blah($bar);
}

#-----------------------------------------------------------------------------

## name "%OPERATOR%" within positive postfix statement modifiers
## failures 0
## cut

blah() if $foo %OPERATOR% $bar;

blah() while $foo %OPERATOR% $bar;

blah($_) for grep { $_ %OPERATOR% $bar } \@foo;

#-----------------------------------------------------------------------------

## name "%OPERATOR%" within negative control structures
## failures 2
## cut

unless ($foo %OPERATOR% $bar) {
    blah();
}

until ($foo %OPERATOR% $bar) {
    blah();
}

#-----------------------------------------------------------------------------

## name "%OPERATOR%" within negative postfix statement modifiers
## failures 2
## cut

blah() unless $foo %OPERATOR% $bar;

blah() until $foo %OPERATOR% $bar;

#-----------------------------------------------------------------------------
END_COMPARATOR_CODE

    $code_template =~ s{%OPERATOR%}{$operator}gmx;
    print {$test_file} $code_template;
}

#-----------------------------------------------------------------------------


##############################################################################
#      $URL$
#     $Date$
#   $Author$
# $Revision$
##############################################################################

# Local Variables:
#   mode: cperl
#   cperl-indent-level: 4
#   fill-column: 78
#   indent-tabs-mode: nil
#   c-indentation-style: bsd
# End:
# ex: set ts=8 sts=4 sw=4 tw=78 ft=perl expandtab :
