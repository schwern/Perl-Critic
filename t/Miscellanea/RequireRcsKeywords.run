## name RCS keywords in POD
## failures 0
## cut

=pod

  $Revision$
  $Source$
  $Date$

=cut

#-----------------------------------------------------------------------------

## name No RCS keywords at all
## failures 3
## cut

#just a comment
$foo = "bar";
$baz = qq{nuts};

#-----------------------------------------------------------------------------

## name Keywords in comments
## failures 0
## cut

# $Revision$
# $Source$
# $Date$

#-----------------------------------------------------------------------------

## name Id in comments
## failures 0
## cut

# $Id$
END_PERL

#-----------------------------------------------------------------------------

## name Keywords in literals
## failures 0
## cut

'$Revision$'
'$Source: foo/bar $'
'$Date$'

#-----------------------------------------------------------------------------

## name Keywords in literals, q{}-style
## failures 0
## cut

q{$Revision$}
q{$Source: foo/bar $}
q{$Date$}

#-----------------------------------------------------------------------------

## name Keywords in literals, q{}-style, with parms
## failures 0
## parms {keywords => 'Revision Author Id'}
## cut

q{$Revision$}
q{$Author$}
q{$Id: whatever $}

#-----------------------------------------------------------------------------

## name Empty code
## failures 1
## parms {keywords => 'Author Id'}
## cut

#nothing here!
$policy = 'Miscellanea::RequireRcsKeywords';
is( pcritique($policy, \$code, \%config), 1, $policy);

#-----------------------------------------------------------------------------

## name Keywords after __END__
## failures 0
## cut

__END__
# $Revision$
# $Source$
# $Date$

#-----------------------------------------------------------------------------

## name Keywords in qw$ ... $ (RT 45196)
## failures 0
## parms {keywords => 'Revision'}
## cut

use version; our $VERSION = qv( '1.0.' . qw$Revision$ );

#-----------------------------------------------------------------------------

## name Keywords in qw{$ ... $} are invalid (RT 45196)
## failures 1
## parms {keywords => 'Revision'}
## cut

use version; our $VERSION = qv( '1.0.' . qw{ $Revision$ } );

#-----------------------------------------------------------------------------

## cut

# The above '## cut' prevents the following lines from being included in the
# last test's document and producing false negatives (or positives, as the
# case may be).

##############################################################################
#      $URL$
#     $Date$
#   $Author$
# $Revision$
##############################################################################

# Local Variables:
#   mode: cperl
#   cperl-indent-level: 4
#   fill-column: 78
#   indent-tabs-mode: nil
#   c-indentation-style: bsd
# End:
# ex: set ts=8 sts=4 sw=4 tw=78 ft=perl expandtab shiftround :
