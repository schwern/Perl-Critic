## name basic passes
## failures 0
## cut
sub foo { }
sub bar;
sub baz { return; }
sub quux { return {some => [qw(complicated data)], q{ } => /structure/}; }

#-----------------------------------------------------------------------------

## name complex passes
## failures 0
## cut
sub foo { if ($bool) { return; } else { return; } }
sub bar { unless ($bool) { return; } else { return; } }
sub baz { if ($bool) { return; } elsif ($bool2) { return; } else { return; } }
sub quuz { unless ($bool) { return; } elsif ($bool2) { return; } else { return; } }

#-----------------------------------------------------------------------------

## name ternary returns
## failures 0
## TODO We are not yet detecting ternaries
## cut
sub foo { 1 ? return : 2 ? return : return; }

#-----------------------------------------------------------------------------

## name returning ternaries
## failures 0
## cut
sub foo { return 1 ? 1 : 2 ? 2 : 3; }

#-----------------------------------------------------------------------------

## name implicit returns fail
## failures 2
## cut
sub foo { 1 }
sub foo { 'Club sandwich'; }

#-----------------------------------------------------------------------------

## name return in a constant loop
## failures 1
## cut
sub foo { while (1==1) { return; } }

#-----------------------------------------------------------------------------

## name not all code paths returns
## failures 3
## cut
sub foo { if ($bool) { } else { } }
sub foo { if ($bool) { $foo = 'bar'; } else { return; } }
sub foo { unless ($bool) { $foo = 'bar'; } else { return; } }

#-----------------------------------------------------------------------------

## name special blocks exemption
## failures 0
## cut
BEGIN {
  print 'this should not need a return';
}
INIT {
  print 'nor this';
}
CHECK {
  print 'nor this';
}
END {
  print 'nor this';
}

#-----------------------------------------------------------------------------

## name goto is equivalent to return
## failures 0
## cut
sub foo { goto &bar; }
END_PERL

#-----------------------------------------------------------------------------

## name next and last are not equivalent to return (and are invalid Perl)
## failures 2
## cut
sub foo { next; }
sub bar { last; }

#-----------------------------------------------------------------------------

## name abnormal termination is allowed
## failures 0
## cut
sub foo   { die; }
sub bar   { croak; }
sub baz   { confess; }
sub bar_C { Carp::croak; }
sub baz_C { Carp::confess; }
sub quux  { exit; }

#-----------------------------------------------------------------------------

## name Final return is present, but conditional
## failures 3
## cut
sub foo   { die if $condition }
sub bar   { croak unless $condition }
sub baz   { exit for @condition }

#-----------------------------------------------------------------------------

## name Compound final return is present, but conditional
## failures 1
## cut
sub foo {

    if( $condition ) {
        return if $today_is_tuesday;
    }
    else {
        exit unless $today_is_wednesday;
    }
}



